<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.spring_boot_final.project.dao.IReviewNoteDAO">

	<!-- 리뷰게시판 목록 출력하기 -->
	<select id="reviewNoteList" parameterType="int" resultType="com.spring_boot_final.project.model.ReviewNoteVO">
	
	SELECT r.reviewNoteId,
		   r.reviewNoteTitle,
		   r.reviewNote,
		   r.reviewNoteLike,
		   r.reviewNoteCommentNum,
		   r.reviewNoteCreatedDate,
		   r.reviewPageViewState,
		   c.courseId,
		   c.placeNames,
		   c.addressNames,
		   c.courseTitle,
		   c.courseTag,
		   e.exhbnId,
		   e.exhbnImgUrl,
		   u.userNickname,
		   r.userId
	FROM reviewNote r, course c, user u, exhbn e
	WHERE c.courseId = r.courseId and r.userId = u.userId and r.exhbnId = e.exhbnId and r.reviewPageViewState = 'POST'
	ORDER by r.reviewNoteCreatedDate DESC
	
	</select>
	
	<select id="selectReviewNote" parameterType="int" resultType="com.spring_boot_final.project.model.ReviewNoteVO">
	
	SELECT r.reviewNoteId,
		   r.reviewNoteTitle,
		   r.reviewNote,
		   r.reviewNoteLike,
		   r.reviewNoteCommentNum,
		   r.reviewNoteCreatedDate,
		   r.reviewPageViewState,
		   c.courseId,
		   c.placeNames,
		   c.addressNames,
		   c.courseTitle,
		   c.courseTag,
		   e.exhbnId,
		   e.exhbnImgUrl,
		   u.userNickname,
		   u.userId
	FROM reviewNote r, course c, user u, exhbn e
	WHERE r.reviewNoteId = #{reviewNoteId} and  r.courseId = c.courseId and r.userId = u.userId and r.exhbnId = e.exhbnId
	</select>
	
	<!-- 리뷰게시판 글 작성하기 -->
	<insert id="createReviewNote" parameterType="com.spring_boot_final.project.model.ReviewNoteVO">
		INSERT INTO reviewNote (reviewNoteTitle, reviewNote, userId, courseId, exhbnId)
		VALUES (#{reviewNoteTitle}, #{reviewNote}, #{userId}, #{courseId}, #{exhbnId});
	</insert>
	
	<!-- 리뷰게시판 글 수정 -->
	<update id="updateReviewNote" parameterType="com.spring_boot_final.project.model.ReviewNoteVO">
		UPDATE reviewNote
		SET reviewNoteTitle = #{reviewNoteTitle},
		reviewNote = #{reviewNote}
		WHERE reviewNoteId = #{reviewNoteId}
		AND userId = #{userId}
	</update>
	
	<!-- 리뷰게시판 글 삭제 -->
	<update id="deleteReviewNote" parameterType="com.spring_boot_final.project.model.ReviewNoteVO">
		UPDATE reviewNote
		SET reviewPageViewState = 'DELETE'
		WHERE reviewNoteId = #{reviewNoteId}
		AND userId = #{userId}
	</update>
	
	<!-- 리뷰게시판 list 댓글 숫자 -->
	<update id="updateReviewNoteCommentUp" parameterType="int">
		UPDATE reviewNote
		SET reviewNoteCommentNum = reviewNoteCommentNum + 1
		WHERE reviewNoteId = #{reviewNoteId}
	</update>
	
	<update id="updateReviewNoteCommentDown" parameterType="int">
		UPDATE reviewNote
		SET reviewNoteCommentNum = reviewNoteCommentNum - 1
		WHERE reviewNoteId = #{reviewNoteId}
	</update>
	
	<!-- 리뷰게시판 종아요 기능 -->
	<insert id="insertReviewNoteLike" parameterType="com.spring_boot_final.project.model.ReviewNoteVO">
		INSERT INTO reviewNoteLike (reviewNoteId,userId)
		values (#{reviewNoteId}, #{userId});
	</insert>
	
	<select id="selectReviewNoteLike" parameterType="com.spring_boot_final.project.model.ReviewNoteVO" resultType="int">
	  SELECT count(*)
	  FROM reviewNoteLike
	  WHERE reviewNoteId = #{reviewNoteId}
	  AND userId = #{userId};
	</select>
	
	<update id="updateReviewNoteLikeUp" parameterType="int">
		UPDATE reviewNote
		SET reviewNoteLike = reviewNoteLike + 1
		WHERE reviewNoteId = #{reviewNoteId}
	</update>
	
	<update id="updateReviewNoteLikeDown" parameterType="int">
		UPDATE reviewNote
		SET reviewNoteLike = reviewNoteLike - 1
		WHERE reviewNoteId = #{reviewNoteId}
	</update>
	
	<delete id="deleteReviewNoteLike" parameterType="com.spring_boot_final.project.model.ReviewNoteVO">
		DELETE 
		FROM reviewNoteLike
		WHERE reviewNoteId = #{reviewNoteId}
		AND userId = #{userId};
	</delete>
	
	<!-- 리뷰게시판 검색 -->
	<select id="reviewNoteSearch" parameterType="string" resultType="com.spring_boot_final.project.model.ReviewNoteVO">
		SELECT r.reviewNoteId,
			   r.reviewNoteTitle,
			   r.reviewNote,
			   r.reviewNoteLike,
			   r.reviewNoteCommentNum,
			   r.reviewNoteCreatedDate,
			   r.reviewPageViewState,
			   c.courseId,
			   c.placeNames,
			   c.addressNames,
			   c.courseTitle,
			   c.courseTag,
			   e.exhbnId,
			   e.exhbnImgUrl,
			   u.userNickname,
			   u.userId
		FROM reviewNote r, course c, user u, exhbn e
		WHERE reviewNoteTitle like CONCAT ('%',#{title},'%')
		and  r.courseId = c.courseId and r.userId = u.userId and r.exhbnId = e.exhbnId and r.reviewPageViewState = 'POST'

	</select>
	
	<!-- 리뷰 게시판 탭 메뉴 -->
	<select id="reviewNoteNew" parameterType="int" resultType="com.spring_boot_final.project.model.ReviewNoteVO">
		SELECT r.reviewNoteId,
			   r.reviewNoteTitle,
			   r.reviewNote,
			   r.reviewNoteLike,
			   r.reviewNoteCommentNum,
			   r.reviewNoteCreatedDate,
			   r.reviewPageViewState,
			   c.courseId,
			   c.placeNames,
			   c.addressNames,
			   c.courseTitle,
			   c.courseTag,
			   e.exhbnId,
			   e.exhbnImgUrl,
			   u.userNickname,
			   u.userId
		FROM reviewNote r, course c, user u, exhbn e
		WHERE r.courseId = c.courseId and r.userId = u.userId and r.exhbnId = e.exhbnId and r.reviewPageViewState = 'POST'
		ORDER by r.reviewNoteCreatedDate DESC
	</select>
	
	<select id="reviewNotePopular" parameterType="int" resultType="com.spring_boot_final.project.model.ReviewNoteVO">
		SELECT r.reviewNoteId,
			   r.reviewNoteTitle,
			   r.reviewNote,
			   r.reviewNoteLike,
			   r.reviewNoteCommentNum,
			   r.reviewNoteCreatedDate,
			   r.reviewPageViewState,
			   c.courseId,
			   c.placeNames,
			   c.addressNames,
			   c.courseTitle,
			   c.courseTag,
			   e.exhbnId,
			   e.exhbnImgUrl,
			   u.userNickname,
			   u.userId
		FROM reviewNote r, course c, user u, exhbn e
		WHERE r.courseId = c.courseId and r.userId = u.userId and r.exhbnId = e.exhbnId and r.reviewPageViewState = 'POST'
		ORDER by r.reviewNoteLike DESC
	</select>
	
	<select id="reviewNoteComment" parameterType="int" resultType="com.spring_boot_final.project.model.ReviewNoteVO">
		SELECT r.reviewNoteId,
			   r.reviewNoteTitle,
			   r.reviewNote,
			   r.reviewNoteLike,
			   r.reviewNoteCommentNum,
			   r.reviewNoteCreatedDate,
			   r.reviewPageViewState,
			   c.courseId,
			   c.placeNames,
			   c.addressNames,
			   c.courseTitle,
			   c.courseTag,
			   e.exhbnId,
			   e.exhbnImgUrl,
			   u.userNickname,
			   u.userId
		FROM reviewNote r, course c, user u, exhbn e
		WHERE r.courseId = c.courseId and r.userId = u.userId and r.exhbnId = e.exhbnId and r.reviewPageViewState = 'POST'
		ORDER by r.reviewNoteCommentNum DESC
	</select>
	
</mapper>